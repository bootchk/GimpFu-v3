# Vagga script to build latest GIMP (2.99)

# Requirements of the host machine:
# vagga installed (see web)
# uidmap installed
#     >sudo apt-get install uidmap

# a chain of containers, to minimize rebuilding as changes are made.
# Each container depends on previous as specified by "!Container foo"

# Goal or current design of this script:
# 1) use latest packaged dependencies (e.g. glib) from the distribution of the container
# 2) build artifacts: babl, gegl, gimp
# 3) install build artifacts in the usual place (don't worry about polluting the container)
#    i.e. not define any special GIMP_PREFIX


containers:

  # basic OS with dev (compiling)
  baseOS:
    setup:
    # 18.10- !Ubuntu cosmic
    # 19.04- !Ubuntu disco
    # 19.10- !Ubuntu eoan
    # 20.4 LTS- !Ubuntu focal
    # June 16, 2020 focal fails at dbus_cil package from glib2_test package
    # 20.10- !Ubuntu groovy
    # 21.04- !Ubuntu hirsute
    # 21.10- !Ubuntu impish
    - !Ubuntu jammy

    # enable universe repository (where gimp lives)
    - !UbuntuUniverse
    # tools for dev (C compiler)
    - !Install [build-essential]
    - !Install [gdb]




  # with required build tools
  # Some tools are for optional build: meson, clang
  baseWithTools:
    setup:
    - !Container baseOS

    # GIMP build needs setuptools
    - !Install [python3-setuptools]

    # meson is a python3 app
    # Install packaged version, which might be too old.
    # Alternatively, get latest using pip
    #- !Sh pip3 install meson
    - !Install [meson]

    # clang versus gcc
    - !Install [clang]
    # gnu ld vs llvm's lld (installs as ld.lld)
    - !Install [lld]

    # meson and autotools use pkg-config
    - !Install [pkg-config]

    # meson.build calls git
    - !Install [git]

    # meson will use cmake if available?
    - !Install [cmake]

    # build uses gobject introspection tools
    - !Install [gobject-introspection]

    # more tools
    - !Install [ xsltproc]

    # tool to build API docs
    - !Install [gtk-doc-tools]

    # specific to autotools build
    - !Install [libtool]

    # in8n internationalization
    - !Install [intltool]

    # build scripts call git and test to establish version
    - !Sh which git
    - !Sh which test



  # with libraries required by gegl, babl, gimp (and other things we build)

  # these are package names, might depend on distribution
  # e.g. package names are different in alpine

  gimpDeps:
    setup:
    - !Container baseWithTools

    # babl, gegl, GIMP uses glib group of libraries
    # package comprises glib, gobject, and gio
    # Oct. 2020: fails for [glib2.0] with MONO exception.  Use -dev
    - !Install [glib2.0-dev]

    # To debug glib, get debug symbols
    # First, the repo for debug symbols
    #- !UbuntuRepo
    #  url: http://ddebs.ubuntu.com
    #  suite: groovy
    #  components: [universe]
    # Next a key
    #- !AptTrust keys: [C8CAB6595FDFF622]
    # Tried glib2.0- dbg, dbgsym, dbgsym.ddeb
    # Tried libglib2.0- dbg
    # Tried universe
    #- !Install [libglib2.0-dbgsym]

    # the builds deposit introspection data
    # If omit, get can't find ...gir... when building gegl
    - !Install [libgirepository1.0-dev]

    # babl specific

    # links against lcms2 (lite color mgt system) library, need the dev flavor
    - !Install [liblcms2-dev]

    # gegl specific

    # depends on babl (which we build), and these libraries from packages
    - !Install [libjson-glib-dev]

    # gimp specific
    # Somewhat in reverse order of complain by build

    # interpreters
    # Python3 PyGObject.  See earlier, installed Python3
    - !Install [ python3-gi]
    # lua
    - !Install [ luajit]
    - !Install [ lua-lgi ]
    # javascript
    - !Install [ gjs]

    # plugins, mainly file format plugins?
    # JPEG format
    - !Install [ libjpeg-dev]
    # TIFF format
    - !Install [ libtiff-dev]
    # PDF format
    - !Install [ libpoppler-glib-dev]
    - !Install [ poppler-data]

    # file compressors
    - !Install [ liblzma-dev]
    - !Install [ libbz2-dev]

    # ???
    - !Install [ libxmu-dev]
    - !Install [ libappstream-glib-dev]
    - !Install [ librsvg2-dev]

    # mypaint
    - !Install [ mypaint-brushes]
    - !Install [ libmypaint-dev]

    # accessibility toolkit
    - !Install [ libatk1.0-dev]

    #image metadata
    - !Install [ libgexiv2-dev]

    # graphics toolkit: GTK and GDK
    - !Install [ libgtk-3-dev]

    # gtk-encode-symbolic-svg
    # To search installed packages: dpkg -S gtk-encode-symbolic-svg
    # To search Ubuntu in browser "Ubuntu Packages Search"
    # Prior to Ubuntu 20.04:  - !Install [ gtk-3-examples]
    - !Install [libgtk-3-bin]

    # ?
    - !Install [ libgdk-pixbuf2.0-dev]

    # renderers
    - !Install [ libpango1.0-dev]
    - !Install [ libcairo2-dev]

    # optional but suppress warnings
    - !Install [ libcanberra-gtk3-module ]

    # optional for browsing API docs
    - !Install [ yelp ]

    # Ubuntu requires this else Gimp..Gtk crashes with:  Icon 'image-missing' not present in theme Symbolic
    - !Install [ gnome-icon-theme ]

    # Since 2.99.2, Gimp requires vala compiler
    - !Install [ valac ]

    # avoid dbus error messages from gimp
    - !Install [ dbus-x11 ]

    # Needed for meson, clang build
    - !Install [ libomp-dev ]

    # Below not required by gimp, just required by my dev

    # to run gimp in dbg in a gnome-terminal
    - !Install [ gnome-terminal ]

    # some my vagga commands want wget
    - !Install [wget]

    # gimp tests want x11 virtual frame buffer
    - !Install [xvfb]

    # New require for Gimp gettext stuff, June 2022
    - !Install [ autopoint ]

    # remove DNS file that vagga will recreate after build
    # !!! You must do this last, and not at the beginning of a container build
    - !Sh "rm /etc/resolv.conf"

    # Larger /tmp for testing
    # 100Mi is default, not enough to create many image files
    volumes:
      /tmp: !Tmpfs { size: 500Mi, mode: 0o1777 }

    environ:
      HOME: /work/.home



  # with babl, gegl source
  # gimp requires latest babl, gegl, so we build instead of install
  # These are relatively stable compared to gimp source
  gimpDepsSource:
    setup:
    - !Container gimpDeps

    # This causes build to fail, can't find git_version.h because this gets only the files, not .git
    #- !Git
    #  url: https://gitlab.gnome.org/GNOME/babl.git
    #  path: /home/babl

    # OR use git to clone the repository
    - !Sh |
       git clone https://gitlab.gnome.org/GNOME/babl.git /home/babl

    # OR most most recent GIMP release archive
    # 1.72=>1.74=>1.78=>1.84=>1.86
    # When you change this, also change below the cd
    #- !Tar
    #  url: https://download.gimp.org/pub/babl/0.1/babl-0.1.86.tar.xz
    #  path: /home

    # PR get tarball from babl project, the very latest i.e. master
    # Fail with "unexpected compression"  https://gitlab.gnome.org/GNOME/babl/repository/archive.tar.gz
    # Get a specific sha i.e. commit sha256: 69e6b09067f2bbca7ac0dfda0131042d7d1f448c
    #- !Tar
    #  url: https://gitlab.gnome.org/GNOME/babl/master/archive.tar.gz
    #  path: /home

    #- !Git
    #  url: https://gitlab.gnome.org/GNOME/babl
    #  path: /home/babl
    #  revision: 69e6b090




    # Gimp depends on latest gegl which might not be released by gegl.org
    # i.e. get from gimp.org OR get from gegl.org
    # !!! If you change this, also change below the cd to the gegl dir, named differently

    # Get from gimp.org
    #- !Tar
    #  url: https://download.gimp.org/pub/gegl/0.4/gegl-0.4.18.tar.xz
    #  url: https://download.gimp.org/pub/gegl/0.4/gegl-0.4.24.tar.xz
    #  path: /home

    # Get latest, bleeding, from shared, bare repository at gegl.org

    # !!! Must specify a revision, else vagga will, the first time get the latest
    # !!! and subsequently cache it indefinitely.  See vagga docs.
    # !!! But you can't get the latest revision until it is released.
    # So delete contents of the cache ~/.cache/vagga/cache when gegl changes
    # Or delete the directory ...cache/git
    # Or specify the revision that GIMP wants
    #  Fail: revision: 4.27
    # Only a specific commit seems to work, look it up at gitlab gegl

    - !Sh |
       echo "about to git gegl"

    # Fails on SSL certificate expired
    # 0.4.34
    #- !Git
    #  url: https://gitlab.gnome.org/GNOME/gegl
    #  path: /home/gegl
    #  revision: 9aaf6b35

    # 0.4.??   revision: 63b8e5f9

    - !Sh |
       git clone https://gitlab.gnome.org/GNOME/gegl.git /home/gegl

    # starting about Dec. 2021, require gexiv2 > 12.2 which is not present in Ubuntu

    - !Sh |
       git clone https://gitlab.gnome.org/GNOME/gexiv2.git /home/gexiv2


  # With built babl, gegl, gexiv2
  bablGeglDev:
    setup:
    - !Container gimpDepsSource

    # Build (from source) certain prereqs of gimp: babl, gegl

    # We don't set GIMP_PREFIX.  Instead we install to default place.

    # If Debian, need the architecture label
    # TODO not working, see below, hardcoded
    - !Sh echo "Determine architecture"
    - !Sh dpkg-architecture -qDEB_HOST_MULTIARCH 2> /dev/null
    - !Env
      MY_ARCH: dpkg-architecture -qDEB_HOST_MULTIARCH 2> /dev/null
    - !Sh echo $MY_ARCH

    # Used by GIMP build to detect the build dependencies
    # E.G. gegl depends on babl installed and uses pkgconfig to find it
    # This has Debian path prepended
    # TODO "${GIMP_PREFIX}/lib/${MY_ARCH}/pkgconfig:${GIMP_PREFIX}/lib/pkgconfig:${GIMP_PREFIX}/share/pkgconfig"
    #- !Env
    #  PKG_CONFIG_PATH: "/home/lib/x86_64-linux-gnu/pkgconfig:/home/lib/pkgconfig:/home/share/pkgconfig"
    - !Sh echo $PKG_CONFIG_PATH


    # Note babl and gegl build the same
    # WAS: cd /home/babl-0.1.86


    # Failed attempt to create missing file
    #- !GitDescribe
    #  repo: /home/babl
    #  output-file: /git-version.h

    # Interferes with gegl build
    # -Db_sanitize=address,undefined \
    # -Db_lto=true


    - !Sh |
        cd /home/babl
        meson _build \
         --buildtype=debug \
          -Dwith-docs=false
        cd _build
        ninja
        ninja install

    # Partial check of installed artifacts, installed in default location
    #- !Sh test -d /usr/local/share/gir-1.0/babl/Babl-0.1.gir


    # build gegl

    # When it builds, it lists options that will be built, according to installed libraries it finds
    # e.g. won't build umfpack if libumfpack5 is not installed
    # Then at GIMP runtime, it may complain of missing GEGL ops

    # Used to find the glib-introspection dependencies.
    # gegl builds its introspection data.
    # To do so, it must find Babl-0.1.gir
    # was  XDG_DATA_DIRS: "/home/share:/usr/share:$XDG_DATA_DIRS"
    # was  XDG_DATA_DIRS: "/usr/local/shared"

    - !Env
      XDG_DATA_DIRS: "/usr/local/share:/usr/share"

    - !Sh echo ">>>>>>  XDG_DATA_DIRS" $XDG_DATA_DIRS

    # !!! Not using     --prefix=${GIMP_PREFIX} \
    # Use cd /home/gegl-0.4.xx for a tar pull
    # Use cd /home/gegl for a git pull

    # May 2021 add sanitize, release=>debug.  Does not affect AM build
    # but prevents meson build of GIMP, fails at GIR generation
    # -Db_sanitize=address,undefined \
    # -Dintrospection=false \
    # -Db_lto=true
    #
    - !Sh |
        cd /home/gegl
        meson _build \
         --buildtype=debug \
         -Ddocs=false \
         -Dgtk-doc=false
        cd _build
        ninja
        ninja install


    #
    - !Sh |
        cd /home/gexiv2
        meson _build \
         --buildtype=debug
        cd _build
        ninja
        ninja install

    # remove DNS file that vagga will recreate after build
    - !Sh "rm /etc/resolv.conf"

    # Using !Git, but that does not create a git repository so this doesn't work
    # cd /home/gegl
    # git status





  # !!! Note the containers branch here.
  # Later, choose one of these on which to build gimpLocal


  # container with gimp configure to build in a parallel or VPATH dir not in the container
  gimpAMReady:
    setup:
    - !Container bablGeglDev

    - !Sh mkdir /work/gimpAMGccBuild

    - !Sh |
        # cd to the build dir
        cd /work/gimpAMGccBuild
        # configure from the source dir
        # --disable-docs obsolete?
        # CFLAGS="-fsanitize=address -fno-omit-frame-pointer" /work/gimp/autogen.sh --enable-debug --disable-gi-docgen --without-vala --with-pdbgen
        # /work/gimp/autogen.sh  --enable-debug --disable-gi-docgen --without-vala --with-pdbgen
        CFLAGS="-fno-stack-clash-protection -fstack-check" /work/gimp/autogen.sh --enable-debug --disable-gi-docgen --without-vala --with-pdbgen



  # With built gimp
  # Uses AM automake variant of build system for Gimp
  # Formerly copied source into container

  # Try not to alter this container, it is stock container after GIMP build
  # Note that /usr/local/lib/gimp/2.99/plug-ins/python does not exist

  gimpAMDev:
    setup:
    - !Container bablGeglDev

    # rebuild container when changed: local clone of gimp repository (in /work i.e. project directory )
    # !!! The build must not put the _build directory in this directory, else container will fail
    # with: Can't write image usage info: No such file or directory (os error 2)
    # meaning the dependency changed during container build
    - !Depends gimp

    # Get Gimp sources

    # latest, bleeding
    #- !Git
    #  url: https://gitlab.gnome.org/GNOME/gimp.git
    #  path: /home/gimp

    # Options
    # See INSTALL or INSTALL.in file in repository.  Seems definitive

    - !Env LD_LIBRARY_PATH: "/usr/local/lib/x86_64-linux-gnu:/usr/lib"
    - !Env XDG_DATA_DIRS: "/usr/local/share:/usr/share"

    # echo environment
    - !Sh echo "home ->"  $HOME
    - !Sh echo "library path ->"  $LD_LIBRARY_PATH
    - !Sh echo "introspection path ->"  $XDG_DATA_DIRS
    - !Sh echo "binary path ->" $PATH

    # TEMP for debug
    # - !Install [strace]

    # TEMP to test autoconf 2.70 Mar 20, 2021

    # missing command makeinfo
    #- !Install [ texinfo, help2man ]

    #- !Git
    #  url: http://git.sv.gnu.org/r/autoconf.git
    #  path: /home/autoconf
    #- !Tar
    #  url: ftp://ftp.gnu.org/gnu/autoconf/autoconf-2.71.tar.xz
    #  path: /work

    # autoreconf -vi
    #- !Sh |
    #    cd /work/autoconf-2.71
    #    ./configure
    #    make
    #    make install
    #    autoconf --version



    # Build gimp

    # My customization of the bare commands
    # disabling docs, python, vector-icons
    # --jobs=4 or -j4
    # ??? make distclean to alleviate "unrecognized file format"
    # --disable-python ?? what does that prevent? PyGimp, or build Python interpreter, or install Python plugins
    # --disable-docs ?? user manual?
    # --disable-gtk-doc ?? programmers reference manual (libgimp API and PDB?)

    # --disable-vector-icons was working until Jan. 12

    # preface: CFLAGS="-fsanitize=address -fno-omit-frame-pointer"
    # option to rebuild PDB      autogen.sh --with-pdbgen
    # make -j4

    # Build in a directory copied into the container (in tree since it creates _build?)
    - !Copy
      source: /work/gimp
      path:  /home/gimp

    # address,bounds,bounds-strict,alignment,object-size
    #CFLAGS="-fsanitize=address -fno-omit-frame-pointer" ./autogen.sh --disable-docs --enable-debug --with-pdbgen --disable-gi-docgen
    # OR:  ./autogen.sh --disable-docs --enable-debug --disable-gi-docgen
    - !Sh |
        cd /home/gimp
        ./autogen.sh --disable-docs --enable-debug --disable-gi-docgen --without-vala
        make all-am -j4
        make install

    # Build out of source tree, but build in the container
    # This doesn't work yet.
    #- !EnsureDir /gimpBuild
    #- !Sh |
    #    cd gimpBuild
    #    export SRCTREE=/work/gimp
    #    CFLAGS="-fsanitize=address -fno-omit-frame-pointer" ./autogen.sh --disable-docs --enable-debug --with-pdbgen
    #    /work/gimp/configure
    #    make all-am -j4
    #    make install

    # remove DNS file that vagga will recreate after build
    - !Sh "rm /etc/resolv.conf"


    # mount directories from outside the container
    # /volumes/ is defined in .config/vagga/settings.html

    # This is mounting plugin directories kept in ~/git/testGimpPDB

    # /root:   means to mount it in .vagga/container/work ???
    # /root/testGimpPDB:   means to mount it ???
    volumes:
      /work/testGimpPDB: !BindRO /volumes/testGimpPDB
      /work/testGimpExportImport: !BindRO /volumes/testGimpExportImport
      /work/testGimpScriptFuBinding: !BindRO /volumes/testGimpScriptFuBinding

      # Larger /tmp for testing
      # 100Mi is default, not enough to create many image files
      /tmp: !Tmpfs { size: 500Mi, mode: 0o1777 }


    # env that GIMP expects
    environ:
      HOME:            /work/.home
      GIMP_PREFIX:     /usr/local
      GEGL_PATH:       /usr/local/lib/x86_64-linux-gnu/gegl-0.4
      GI_TYPELIB_PATH: /usr/local/lib/x86_64-linux-gnu/girepository-1.0:/usr/local/lib/girepository-1.0
      NO_AT_BRIDGE:    1
      LD_LIBRARY_PATH: /usr/local/lib/x86_64-linux-gnu:/usr/local/lib:${LD_LIBRARY_PATH}
      XDG_DATA_DIRS:   /usr/local/share:/usr/share
      PATH:            /usr/local/bin:/usr/bin:/bin




  # Generate documentation for Python language bindings to Gimp, etc.
  # Same documents for GLib, GObj, Gio webbed at "PyGObject API Reference"
  #
  # - !Sh g-ir-doc-tool --language=Python -o /work/.home/gimp-doc /usr/local/share/gir-1.0/Gimp-3.0.gir

  #- !Sh g-ir-doc-tool --language=Python -o /work/.home/gimpui-doc /usr/local/share/gir-1.0/GimpUi-3.0.gir
  #- !Sh g-ir-doc-tool --language=Python -o /work/.home/glib-doc /usr/share/gir-1.0/GLib-2.0.gir
  #- !Sh g-ir-doc-tool --language=Python -o /work/.home/gobj-doc /usr/share/gir-1.0/GObject-2.0.gir
  ## crashes: - !Sh g-ir-doc-tool --language=Python -o /work/.home/gio-doc /usr/share/gir-1.0/Gio-2.0.gir

  # pgi-docgen produces nicer documents
  # See my static html copy at ~/PythonGIDocs
  # Generate latest copy only for Gimp
  # WIP needs pgi-docgen and many dependencies
  #- !Sh |
  #    pgi-docgen create /work/.home/_docs Gimp-3.0
  #    pgi-docgen build /work/.home/_docs /work/.home/_docs/_build





  # Container ready to build GIMP
  # Build directory is not in the container.
  # GIMP is not built or installed in the container
  # Local custom Gimp plugins not in the container.

  # The container should NOT automatically rebuild if /work/gimp source changes
  # But if you change a meson.build file, you need to rebuild this container??

  # use --wipe to insure any changes take effect, but you can't use wipe the first time

  # Can use env prefixes
  # LDFLAGS=--verbose

  # More meson options
  # -Db_lto=true

  # -Db_sanitize=address,undefined
  # unrecognized: shared-libasan

  gimpMesonDev:
    setup:
    - !Container bablGeglDev

    # This container NOT depend on changed gimp source
    # Note that meson builds out of tree, i.e. does not touch gimp directory
    # Except that it does, it puts pdbgen files back in the source tree

    # resolve FAILED: cursors/gimp-tool-cursors.c   Related to vector icons?
    - !Env  XDG_DATA_DIRS: "/usr/local/share:/usr/share"

    # resolve ../plug-ins/common/file-pdf-load.c:32:10: fatal error: poppler.h: No such file or directory
    - !Env LD_LIBRARY_PATH: "/usr/local/lib/x86_64-linux-gnu:/usr/lib"

    - !Install [ valgrind ]

    #### Options for GIMP build
    # -Dpoppler=false => -Dpdf=false is not correct
    # -Dpoppler=false still fails to build

    # if GEGL is asan, then this needs asan? else "library not first, use PRELOAD"
    # see later, at compile time -Db_sanitize=address,undefined
    # LDFLAGS=--verbose

    # !!! If you use clang for setup, use the same env at meson compile, else g-ir-scanner fails

    # Fail: CC=clang CXX=clang CC_LD=lld CXX_LD=lld meson setup /work/mesonClangBuild \
    # Fail: CC=clang CXX=clang CC_LD=clang CXX_LD=clang meson setup /work/mesonClangBuild \

    # setup build outside the source tree

    # meson and clang
    #     --buildtype=debug \
    #     -Db_lundef=false \
    #  --wipe \
    - !Sh |
        cd /work/gimp
        CC=clang CXX=clang CC_LD=lld CXX_LD=lld meson setup /work/gimpMesonClangBuild \
         -Db_sanitize=address \
         -Djavascript=false \
         -Dlua=false \
         -Dpython=true \
         -Dvala-plugins=disabled \
         -Dg-ir-doc=false

    # meson and gcc
    # !!! This won't reconfigure the build dir, when you change the options
    - !Sh |
        cd /work/gimp
        meson setup /work/mesonGccBuild \
         -Djavascript=false \
         -Dlua=true \
         -Dpython=true  \
         -Dvala-plugins=disabled \
         -Dg-ir-doc=false

    # Force reconfigure
    # FAIL: meson --reconfigure /work/mesonGccBuild
    # FAIL: ninja reconfigure /work/mesonGccBuild
    # FAIL: meson setup --wipe /work/mesonGccBuild
    #- !Sh |
    #    meson setup --wipe /work/mesonGccBuild

    #- !Sh |
    #    ls /work/mesonGccBuild

    # Also volumes for test plugins
    volumes:
      /work/testGimpPDB: !BindRO /volumes/testGimpPDB




  # Container with meson and clang built GIMP installed
  # !!! source and build dirs not in the container, but container depends on it.
  # vagga will rebuild container if gimp source changes.
  gimpMesonClangInstalled:
    setup:
    - !Container gimpMesonDev

    # Tells vagga to rebuild this container when this file is touched.
    # Depends requires a single file, we can't use the entire /gimp directory
    # - !Depends touchToRebuild

    # resolve FAILED: cursors/gimp-tool-cursors.c   Related to vector icons?
    - !Env  XDG_DATA_DIRS: "/usr/local/share:/usr/share"

    # resolve ../plug-ins/common/file-pdf-load.c:32:10: fatal error: poppler.h: No such file or directory
    # - !Env LD_LIBRARY_PATH: "/usr/local/lib/x86_64-linux-gnu:/usr/lib"
    - !Env LD_LIBRARY_PATH: "/usr/local/lib/x86_64-linux-gnu:/usr/lib:/usr/lib/llvm-12/lib/clang/12.0.0/lib/linux"

    # Build from the build directory.
    # Installs into the container
    # defaults:
    #   jobs 3?? For more, use: -j 4
    #   print one line per command, for verbose use -v
    # ninja -v -j 1 to limit to sequential jobs

    # FAIL: export LD_PRELOAD=$(gcc -print-file-name=libasan.so)
    # ,undefined
    # meson configure -Db_sanitize=address
    - !Sh |
        cd /work/mesonClangBuild

        # ninja -n -v -j 1 -d explain
        #meson configure -Db_sanitize=address
        #ninja -v -d explain -j 1 install
        #ninja -v -j 3 install
        echo "libclang" $(clang -print-file-name=libclang_rt.asan-x86_64.so)
        # Fail: CLANG_ASAN_PRELOAD=$(clang -print-file-name=libclang_rt.asan-x86_64.so) CC=clang CXX=clang CC_LD=lld CXX_LD=lld meson install
        # Fail: CC=clang CXX=clang CC_LD=clang CXX_LD=clang meson install
        # Fail: export LDFLAGS="-Wl,-z,undefs -fsanitize=address"
        #CC=clang CXX=clang LDFLAGS=--verbose CC_LD=lld CXX_LD=lld meson install
        CC=clang CXX=clang LDFLAGS=--verbose CC_LD=lld CXX_LD=lld ninja -v -j 1 install

    # Also volumes for test plugins
    volumes:
      /work/testGimpPDB: !BindRO /volumes/testGimpPDB
      /work/testGimpExportImport: !BindRO /volumes/testGimpExportImport
      /work/testGimpScriptFuBinding: !BindRO /volumes/testGimpScriptFuBinding

      # Larger /tmp for testing
      # 100Mi is default, not enough to create many image files
      /tmp: !Tmpfs { size: 500Mi, mode: 0o1777 }

    # env that GIMP expects
    environ:
      HOME:            /work/.home
      GIMP_PREFIX:     /usr/local
      GEGL_PATH:       /usr/local/lib/x86_64-linux-gnu/gegl-0.4
      GI_TYPELIB_PATH: /usr/local/lib/x86_64-linux-gnu/girepository-1.0:/usr/local/lib/girepository-1.0
      NO_AT_BRIDGE:    1
      LD_LIBRARY_PATH: /usr/local/lib/x86_64-linux-gnu:/usr/local/lib:${LD_LIBRARY_PATH}
      XDG_DATA_DIRS:   /usr/local/share:/usr/share
      PATH:            /usr/local/bin:/usr/bin


  gimpMesonGccInstalled:
    setup:
    - !Container gimpMesonDev

    # Tells vagga to rebuild this container when this file is touched.
    # Depends requires a single file, we can't use the entire /gimp directory
    # - !Depends touchToRebuild

    # resolve FAILED: cursors/gimp-tool-cursors.c   Related to vector icons?
    - !Env  XDG_DATA_DIRS: "/usr/local/share:/usr/share"

    # resolve ../plug-ins/common/file-pdf-load.c:32:10: fatal error: poppler.h: No such file or directory
    # - !Env LD_LIBRARY_PATH: "/usr/local/lib/x86_64-linux-gnu:/usr/lib"
    - !Env LD_LIBRARY_PATH: "/usr/local/lib/x86_64-linux-gnu:/usr/lib:/usr/lib/llvm-12/lib/clang/12.0.0/lib/linux"

    - !Sh |
        cd /work/mesonGccBuild
        meson install

    # Also volumes for test plugins
    volumes:
      /work/testGimpPDB: !BindRO /volumes/testGimpPDB
      /work/testGimpExportImport: !BindRO /volumes/testGimpExportImport
      /work/testGimpScriptFuBinding: !BindRO /volumes/testGimpScriptFuBinding

      # Larger /tmp for testing
      # 100Mi is default, not enough to create many image files
      /tmp: !Tmpfs { size: 500Mi, mode: 0o1777 }

    # env that GIMP expects
    environ:
      HOME:            /work/.home
      GIMP_PREFIX:     /usr/local
      GEGL_PATH:       /usr/local/lib/x86_64-linux-gnu/gegl-0.4
      GI_TYPELIB_PATH: /usr/local/lib/x86_64-linux-gnu/girepository-1.0:/usr/local/lib/girepository-1.0
      NO_AT_BRIDGE:    1
      LD_LIBRARY_PATH: /usr/local/lib/x86_64-linux-gnu:/usr/local/lib:${LD_LIBRARY_PATH}
      XDG_DATA_DIRS:   /usr/local/share:/usr/share
      PATH:            /usr/local/bin:/usr/bin










# Cruft

# Gimp will put it in the PYTHONPATH, we don't want to find its contents
# EmptyDir is not correct, it keeps the directory empty is all child containers
# - !EmptyDir /usr/local/lib/gimp/2.99/python
#- !Sh "rm -rf /usr/local/lib/gimp/2.99/python/*"

# gimp typelib in /usr/local/lib/girepository-1.0
# gegl, babl typelib in /usr/local/lib/x86_64-linux-gnu/gi...





commands:

  # baseOS does not contain many tools
  testOSSanity: !Command
    description: Test sanity of OS in container baseOS. Expect only "which" is found
    container: baseOS
    run: |
      which which
      which pkg-config
      python -V
      wget --version
      curl --version

  # test the container with most dev tools installed
  testMesonSanity: !Command
    description: Test sanity of meson in container baseWithTools
    container: baseWithTools
    run: |
      meson -h
      which pkg-config
      which python3
      which intltool
      python3 -V
      wget --version
      echo "gold linker"
      which gold
      echo "libasan path"   $(gcc -print-file-name=libasan.so)
      echo "which git"; which git


  testSourceSanity: !Command
    description: List contents of source babl and gegl
    container: gimpDepsSource
    run: |
      echo "Contents of /babl"
      ls /home/babl
      echo "Contents of /gegl"; ls /home/gegl
      which git
      echo "trying: pkg-config gegl"
      pkg-config gegl-0.4 --modversion


  getVersionsBablGegl: !Command
    description: Get version of built babl and gegl in bablGeglDev
    container: bablGeglDev
    run: |
      echo "$PKG_CONFIG_PATH:"   $PKG_CONFIG_PATH
      export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig
      echo "$PKG_CONFIG_PATH is:" $PKG_CONFIG_PATH# Show that it installed .so
      echo "Listing /usr/local/lib/x86_64-linux-gnu"
      ls /usr/local/lib/x86_64-linux-gnu
      echo "Version of babl using: pkg-config gegl"
      pkg-config --modversion babl-0.1
      echo "Version of gegl using: pkg-config gegl"
      pkg-config --modversion gegl-0.4
      echo "Version of autoconf"
      autoconf --version
      echo "which autopoint"
      which autopoint

  # It doesn't seems to matter that /usr/local/lib/x86_64-linux-gnu/pkgconfig is not in PKG_CONFIG_PATH



  getVersionsGimpAM: !Command
    description: describe versions of stuff in container gimpAMDev (AM built Gimp)
    container: gimpAMDev
    run: |
      echo "LD_LIBRARY_PATH" $LD_LIBRARY_PATH
      autoconf --version
      /usr/local/bin/gimp-2.99 --version



  getVersionsGimpMeson: !Command
    description: describe versions in container gimpMesonInstalled (meson built Gimp)
    container: gimpMesonInstalled
    run: |
      echo "LD_LIBRARY_PATH" $LD_LIBRARY_PATH
      # Note gegl is not in dpkg
      #echo "Gegl version from dpkg"
      #dpkg -l | grep gegl
      echo "Gegl version from pkg-config"
      pkg-config --modversion gegl-0.4
      echo "GLib version from pkg-config"
      pkg-config --modversion glib-2.0
      echo "Gimp version from pkg-config"
      pkg-config --modversion gimp-3.0
      echo "Python version from python3 --version"
      python3 --version
      echo "PyGObject version from python"
      python3 -c "from gi.repository import GObject
      GObject.pygobject_version"
      echo "Gimp version from gimp-2.99 --version"
      /usr/local/bin/gimp-2.99 --version


  getConfigGimpAM: !Command
    description: Get build config options of gimp in gimpAMDev container
    container: gimpAMDev
    run: |
      cd /home/gimp
      ./configure --help


  installMyPluginsToHome: !Command
    description: Install a set of plugins to .home/.config/GIMP/2.99/plug-ins (seen by all containers)
    container: gimpMesonDev
    run: |

      # Copy some plugins from volumes of the container

      echo "Not clearing plugins"
      #echo "Removing old plugins and gimpfu source"
      #rm -rf /work/.home/.config/GIMP/2.99/plug-ins/*

      # local plugins in /work/.home/.config/GIMP/2.99/plug-ins
      # !!! outside the container
      mkdir /work/.home/.config/GIMP/2.99/plug-ins

      # Refresh installation of gimpfu from development gimp_directory
      # Copy entire directory
      echo "Copying gimpfu"
      cp -rv /work/gimpfu /work/.home/.config/GIMP/2.99/plug-ins

      # Refresh installation of testGIMPPDB
      echo "Copying testGimpPDB"
      #mkdir /work/.home/.config/GIMP/2.99/plug-ins/testGimpPDB
      cp -r /work/testGimpPDB /work/.home/.config/GIMP/2.99/plug-ins
      chmod +x /work/.home/.config/GIMP/2.99/plug-ins/testGimpPDB/testGimpPDB.py

      echo "Copying selected scriptfu scripts"
      # cp -rv /work/gimpTestPlugins/scriptFu/testUndefinedFunc.scm /work/.home/.config/GIMP/2.99/scripts
      #cp -rv /work/gimpTestPlugins/scriptFu/testUndefinedFunc.scm /work/.home/.config/GIMP/2.99/scripts
      #cp -rv /work/plugins/nonGimpFu/testGeglOp.scm /work/.home/.config/GIMP/2.99/scripts
      #cp -rv /work/plugins/nonGimpFu/defectsript-v01.scm /work/.home/.config/GIMP/2.99/scripts
      #cp -r /work/plugins/nonGimpFu/testNumericName.scm   /work/.home/.config/GIMP/2.99/scripts

      #echo "Copying testGimpExportImport"
      # Copy from a volume of the container
      #mkdir /work/.home/.config/GIMP/2.99/plug-ins/testGimpExportImport
      #cp -r /work/testGimpExportImport/* /work/.home/.config/GIMP/2.99/plug-ins/testGimpExportImport

      #echo "Copying testGimpScriptFuBinding"
      #mkdir /work/.home/.config/GIMP/2.99/plug-ins/testGimpScriptFuBinding
      #cp -r /work/testGimpScriptFuBinding/* /work/.home/.config/GIMP/2.99/plug-ins/testGimpScriptFuBinding

      #echo "Copying all test plugins"
      #cp -rv /work/gimpTestPlugins/test/* /work/.home/.config/GIMP/2.99/plug-ins
      #echo "Copying all my test plugins"
      #cp -r /work/plugins/test/* /work/.home/.config/GIMP/2.99/plug-ins

      #echo "Copying all wild test plugins"
      #cp -r /work/plugins/wild/* /work/.home/.config/GIMP/2.99/plug-ins
      #cp -r /work/plugins/wild/plugin-resynth-tileset /work/.home/.config/GIMP/2.99/plug-ins

      echo "Copying selected test plugins"
      # copy a directory containing a plugin.py
      # One of these is WIP
      #cp -rv /work/gimpTestPlugins/test/dumpPDB /work/.home/.config/GIMP/2.99/plug-ins
      #cp -rv /work/gimpTestPlugins/test/dump_pdb /work/.home/.config/GIMP/2.99/plug-ins

      #echo "Copying selected nonGimpfu plugins"
      #cp -r /work/plugins/nonGimpFu/myMinPlugin /work/.home/.config/GIMP/2.99/plug-ins
      #cp -r /work/plugins/nonGimpFu/testGegl    /work/.home/.config/GIMP/2.99/plug-ins

      #echo "Chmoding test plugins"
      # find -D exec /work/.home/.config/GIMP/2.99/plug-ins -name *.py -exec chmod +x '{}' + -print
      #find -D exec /work/.home/.config/GIMP/2.99/plug-ins -type f -name "*.py" -exec chmod +x {} \; -print







  # if you have yelp installed outside the container, and pwd is vaggaGimp, just "yelp .home/gimp-doc"

  # export GEGL_PATH="/usr/local/bin/gegl"
  # GEGL_PATH should point to the .so parent directory
  # gegl -v

  # For asan
  #export LD_PRELOAD=$(gcc -print-file-name=libasan.so)
  # each version of gcc has its own libasanx

  # this may not be necessary
  # - !Install [ libx32asan5 ]

  runAMGimpGUI: !Command
    description: Run gimp GUI in gimpAMDev container, with locally installed plugins
    container: gimpAMDev
    run: |
      echo "XDG_DATA_DIRS introspection path ->"  $XDG_DATA_DIRS
      echo "GI_TYPELIB_PATH introspection path ->"  $GI_TYPELIB_PATH

      # We don't copy any plugins here.
      # Use vagga command installMyPluginsToHome

      # -O -   means: pipe to stdout
      #wget https://github.com/bootchk/testGimpPDB/tarball/master
      #tar xz -f master
      #rm master
      # copy contents of top directory to a new directory
      #mkdir /work/.home/.config/GIMP/2.99/plug-ins/testGimpPDB
      #cp -r bootchk-testGimp*/* /work/.home/.config/GIMP/2.99/plug-ins/testGimpPDB
      #rm -rf bootchk-testGimp*
      #rm -rf wget-log*

      echo "Altering PYTHONPATH to point to local plug-ins"
      export PYTHONPATH=/work/.home/.config/GIMP/2.99/plug-ins/gimpfu:${PYTHONPATH}
      echo $PYTHONPATH

      # debugging wayland
      echo "DISPLAY->"          $DISPLAY
      echo "XDG_SESSION_TYPE->" $XDG_SESSION_TYPE
      # export XDG_SESSION_TYPE=wayland
      # echo "XDG_SESSION_TYPE->" $XDG_SESSION_TYPE
      echo "GDK_BACKEND->"      $GDK_BACKEND
      # Fails export GDK_BACKEND=wayland
      # Fails export DISPLAY=wayland-0
      echo "DISPLAY->"  $DISPLAY

      # ASAN
      ## export LD_PRELOAD=$(gcc -print-file-name=libasan.so)
      echo "LD_PRELOAD:" $LD_PRELOAD
      # suppress error return on leaks from subprocesses
      export ASAN_OPTIONS=detect_leaks=0


      # stop glib at warnings, without catching in GIMP
      #export G_DEBUG=fatal-warnings
      export G_DEBUG=fatal-criticals

      # all domains, info and debug
      export G_MESSAGES_DEBUG=all
      #export G_MESSAGES_DEBUG=scriptfu

      # Per devel-docs/debugging
      # Mostly GUI messages
      #export GIMP_DEBUG=all

      # export GIMP_PLUGIN_DEBUG=all,fatal-criticals
      # !!! Use the filename, not the procedure name
      #export GIMP_PLUGIN_DEBUG=plug-in-dbbrowser,run
      #export GIMP_PLUGIN_DEBUG=procedure-browser,fatal-warnings
      export GIMP_PLUGIN_DEBUG=all,fatal-warnings

      #export GIMPFU_DEBUG=1

      echo "ls gimp"
      ls -l /usr/local/bin/gimp-2.99

      echo "Starting gimp"
      # Fail: gimp --stack-trace-mode=always   should be space, not = ??

      /usr/local/bin/gimp-2.99 --verbose --stack-trace-mode always
      # strace
      #/usr/local/bin/gimp-2.99 --verbose --stack-trace-mode query
      # ls -al
      gdb

      # This fails to open a terminal ?
      # /usr/bin/gnome-terminal &



  # -O -   means: pipe to stdout
  #wget https://github.com/bootchk/testGimpExportImport/tarball/master
  #tar xz -f master
  #rm master
  # copy contents of top directory to a new directory
  #mkdir /work/.home/.config/GIMP/2.99/plug-ins/testGimpExportImport
  #cp -r bootchk-testGimp*/* /work/.home/.config/GIMP/2.99/plug-ins/testGimpExportImport
  #rm -rf bootchk-testGimp*
  #rm -rf wget-log*
  #curl -L  https://github.com/bootchk/testGimpExportImport/tarball/master | tar xz -C /work/.home/.config/GIMP/2.99/plug-ins

  runMesonGimpGUI: !Command
    description: Run gimp GUI in gimpMesonInstalled container, with test plugins (need --use-env DISPLAY)
    container:  gimpMesonGccInstalled
    run: |
      echo "HOME"            $HOME
      echo "GIMP_PREFIX"     $GIMP_PREFIX
      echo "LD_LIBRARY_PATH" $LD_LIBRARY_PATH
      echo "XDG_DATA_DIRS"   $XDG_DATA_DIRS
      echo "PATH"            $PATH
      echo "GEGL_PATH"       $GEGL_PATH
      echo "GI_TYPELIB_PATH" $GI_TYPELIB_PATH

      # We don't install any plugins here
      # use vagga command installMyPluginsToHome

      echo "Altering PYTHONPATH to find GimpFu"
      export PYTHONPATH=/work:${PYTHONPATH}
      echo $PYTHONPATH

      # list plugins we just installed
      ls -alR $HOME/.config/GIMP/2.99/plug-ins


      # Set debug variables

      # stop glib at critical
      # export G_DEBUG=fatal-criticals
      #export G_DEBUG=fatal-warnings

      # tell Gimp to debug certain plugins:  !! use filenames
      # all,fatal-warnings
      # export GIMP_PLUGIN_DEBUG=file-png,fatal-warnings
      # export GIMP_PLUGIN_DEBUG=all,fatal-criticals

      #export GIMPFU_DEBUG=1

      # print all G_MESSAGES
      #export G_MESSAGES_DEBUG=all
      export G_MESSAGES_DEBUG=scriptfu


      # start in a different directory to test PYTHONPATH
      #cd /work/docs

      # --verbose --no-data
      /usr/local/bin/gimp-2.99 --verbose --stack-trace-mode query



  # build in the build directory but install into the container
  # The container is immutable unless write-mode: transient-hard-link-copy
  # but that allows the container to be written and possibly corrupted.
  # use vagga _build --force container_name to fix base container if that was modified.
  buildAMGccGimp: !Command
    description: Build gimp GUI in gimpAMReady container, but do not install there
    container:  gimpAMReady
    write-mode: transient-hard-link-copy
    run: |
      # cd to the build dir
      cd /work/gimpAMGccBuild

      #echo "make distclean"
      #make distclean

      echo "lkk make am gcc GIMP"
      make all-am -j4

      #echo "lkk make distcheck GIMP"
      make distcheck -j4

      echo "lkk install GIMP"
      make install

      # Setup env, the container does not do this
      export LD_LIBRARY_PATH=/usr/local/lib/x86_64-linux-gnu:/usr/local/lib
      export HOME=/work/.home
      export GIMP_PREFIX=/usr/local
      export XDG_DATA_DIRS=/usr/local/share:/usr/share
      export GI_TYPELIB_PATH=/usr/local/lib/x86_64-linux-gnu/girepository-1.0:/usr/local/lib/girepository-1.0
      export NO_AT_BRIDGE=1

      echo "Altering PYTHONPATH to find GimpFu"
      echo "!!! This finds the repo for GimpFu, no need to install it in gimp/plug-ins"
      export PYTHONPATH=/work:${PYTHONPATH}

      echo "Usually plugins are already installed to .home/.config..."

      #echo "G_DEBUG fatal-crit"
      #export G_DEBUG=fatal-criticals
      #export GIMPFU_DEBUG=1

      # all domains, info and debug
      #export G_MESSAGES_DEBUG=all
      export G_MESSAGES_DEBUG=scriptfu

      echo "whiching script-fu-interpreter"
      which script-fu-interpreter
      ls -l /usr/local/bin/script*
      # nm /usr/local/bin/gimpSchemeInterpreter

      echo "ls script-fu plugin"
      ls -al /usr/local/lib/x86_64-linux-gnu/gimp/2.99/plug-ins

      echo "ls gimp app"
      ls -l /usr/local/bin/gimp-2.99

      echo "ls libscriptfu"
      ls -l /usr/local/lib/x86_64-linux-gnu/libscriptfu.so
      ls -l /usr/local/lib/x86_64-linux-gnu/libscriptfu*
      ls -l /usr/local/lib/libscriptfu*
      ls -l /usr/local/lib/x86_64-linux-gnu/gimp/2.99/lib
      ls -l /usr/local/lib/gimp/2.99/lib
      # nm /work/gimpAMGccBuild/plug-ins/script-fu/libscriptfu/.libs/libscriptfu-3.0.so

      #echo "running gimpSchemeInterpreter"
      # gimpSchemeInterpreter

      #echo "setting spanish LANG"
      #export LANG="es.UTF-8"
      #export LANG="es"
      #localectl list-locales

      echo "Running gimp"
      # /usr/local/bin/gimp-2.99 --verbose --stack-trace-mode query
      # valgrind
      /usr/local/bin/gimp-2.99 --stack-trace-mode query




  # build in the build directory but install into the container
  # The container is immutable unless write-mode: transient-hard-link-copy
  # but that allows the container to be written and possibly corrupted.
  # use vagga _build --force container_name to fix base container if that was modified.
  buildMesonGccGimp: !Command
    description: Build gimp GUI in gimpMesonDev container, but do not install
    container:  gimpMesonDev
    write-mode: transient-hard-link-copy
    run: |
      echo "lkk meson build GIMP"
      #export GI_SCANNER_DEBUG=1

      # Fail
      #echo "lkk meson configure ASAN"
      #meson configure -Db_sanitize=address /work/mesonGccBuild

      echo "lkk reconfigure build"
      meson configure /work/mesonGccBuild

      cd /work/mesonGccBuild

      echo "lkk meson gcc compile GIMP"
      # -d explain
      # meson compile v  -j 4

      echo "lkk ninja install GIMP"
      # Can't install to the read-only container unless it is write-mode: ....
      ninja -v -d explain -j 1 install

      echo "Reading rpath"
      readelf -d /usr/local/lib/x86_64-linux-gnu/gimp/2.99/plug-ins/script-fu/script-fu | grep 'R.*PATH'

      #echo "meson test"
      export G_DEBUG=fatal-criticals
      export G_MESSAGES_DEBUG=all
      export NO_AT_BRIDGE=1
      #meson test

      # Setup env, the container does not do this
      export LD_LIBRARY_PATH=/usr/local/lib/x86_64-linux-gnu:/usr/local/lib
      export HOME=/work/.home
      export GIMP_PREFIX=/usr/local
      export XDG_DATA_DIRS=/usr/local/share:/usr/share
      export GI_TYPELIB_PATH=/usr/local/lib/x86_64-linux-gnu/girepository-1.0:/usr/local/lib/girepository-1.0
      export NO_AT_BRIDGE=1

      echo "Altering PYTHONPATH to find GimpFu"
      echo "!!! This finds the repo for GimpFu, no need to install it in gimp/plug-ins"
      export PYTHONPATH=/work:${PYTHONPATH}

      echo "Usually plugins are already installed to .home/.config..."

      #echo "G_DEBUG fatal-crit"
      export G_DEBUG=fatal-criticals
      #export GIMPFU_DEBUG=1

      #export GIMP_DEBUG=all

      # all domains, info and debug
      export G_MESSAGES_DEBUG=all
      # export G_MESSAGES_DEBUG=scriptfu
      export G_MESSAGES_DEBUG=gimpSchemeInterpreter,scriptfu

      echo "which script-fu-interpreter"
      which script-fu-interpreter
      ls -l /usr/local/bin/script*
      # nm /usr/local/bin/gimpSchemeInterpreter

      #echo "ls script-fu plugins"
      #ls -l /usr/local/lib/x86_64-linux-gnu/gimp/2.99/plug-ins/script-fu*

      echo "ls gimp app"
      ls -l /usr/local/bin/gimp-2.99

      echo "ls libscriptfu"
      ls -l /usr/local/lib/x86_64-linux-gnu/libgimp*
      ls -l /usr/local/lib/x86_64-linux-gnu/gimp/2.99/lib

      #echo "running gimpSchemeInterpreter"
      # gimpSchemeInterpreter

      # this doesn't work reliably
      echo "XDG_SESSION_TYPE->" $XDG_SESSION_TYPE
      # echo "Wayland vs Xorg"
      # This doesn't work
      # loginctl show-session $(loginctl | grep $(whoami) | awk '{print $1}') -p Type
      echo $WAYLAND_DISPLAY

      #echo "catting /etc/locale.gen"
      #cat /etc/locale.gen
      # sed 's/# es/es/' /etc/locale.gen >/etc/locale.gen
      # es_HN.UTF-8 UTF-8
      # echo 'es_HN.UTF-8 UTF-8' >/etc/locale.gen
      #echo 'es_ES.UTF-8 UTF-8' >/etc/locale.gen
      #cat /etc/locale.gen
      #echo "generating locale"
      #locale-gen
      #echo "list availble locales"
      #locale -a
      #export LANG='es_ES.UTF-8'
      #env

      echo "Running gimp"
      # valgrind /usr/local/bin/gimp-2.99 --verbose --stack-trace-mode query
      /usr/local/bin/gimp-2.99 --verbose --stack-trace-mode query
      #/usr/local/bin/gimp-2.99 --stack-trace-mode query
      #gdb /usr/local/bin/gimp-2.99

      #echo "Testing batch start of server"
      #/usr/local/bin/gimp-2.99 -i --verbose --batch-interpreter='plug-in-script-fu-eval' -b '(plug-in-script-fu-server 1 "127.0.0.1" 10008 "/work/gimp-log")'
      #cat /work/gimp-log

  buildMesonClangGimp: !Command
    description: Build gimp GUI in gimpMesonDev container, but do not install
    container:  gimpMesonDev
    write-mode: transient-hard-link-copy
    run: |
      echo "lkk meson clang build GIMP"
      echo "lkk reconfigure build"
      meson configure /work/gimpMesonClangBuild
      cd /work/gimpMesonClangBuild
      echo "lkk meson clang compile GIMP"
      # -d explain
      meson compile -j 4


  describeMesonDev: !Command
    description: Describe versions in gimpMesonDev container, but do not
    container:  gimpMesonDev
    run: |
      gcc --version

  # quicker startup
  generateGIDocs: !Command
    description: Generate GI docs from  gimpMesonInstalled container to work/.home
    container:  gimpMesonInstalled
    run: |
       g-ir-doc-tool --language=Python -o /work/.home/gimp-doc   /usr/local/share/gir-1.0/Gimp-3.0.gir
       g-ir-doc-tool --language=Python -o /work/.home/gimpui-doc /usr/local/share/gir-1.0/GimpUi-3.0.gir
       echo "Generated to .home/gimp-doc"

  showEnvGimpMesonInstalled: !Command
    description: env in gimpMesonInstalled
    container:  gimpMesonInstalled
    run: env

  runUbuntuBug: !Command
    description: Run ubuntu-bug in the gimpMesonInstalled container
    container: gimpMesonInstalled
    run: |
      ubuntu-bug gkt3

  gdbGimp: !Command
    description: Run gdb on gimp in container gimpMesonInstalled
    container: gimpMesonInstalled
    run: |
      export PATH="/usr/local/bin:$PATH"
      gdb gimp-2.99

  terminalToGimpMesonInstalled: !Command
    description: Open gnome-terminal on container gimpMesonInstalled, use vagga --use-env DISPLAY termGimpMeson, wait for container
    container: gimpMesonInstalled
    run: |
      echo "Opening gnome-terminal on the GIMP run container"
      /usr/bin/gnome-terminal

  terminalToGimpMesonDev: !Command
    description: Open bash in the gimpMesonDev container
    container:  gimpMesonDev
    write-mode: transient-hard-link-copy
    run: |
      echo "lkk in gimpMesonDev container"
      echo "Try this: cd /work/mesonBuild"
      echo "Try this:  ninja -v -d explain -j 1 install"
      echo "Ctl-D to exit bash and container"
      bash
